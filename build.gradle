import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'eclipse'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.16'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "org.jetbrains.kotlin.jvm" version "1.6.21"
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name


// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
    // withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    mcVersion = '1.12.2'

    // MCP Mappings
    mcpMappingChannel = 'snapshot'
    mcpMappingVersion = '20171003'
    
    // Set username here, the UUID will be looked up automatically
    username = 'klebe0815'
    
    // Add any additional tweaker classes here
    // extraTweakClasses.add('org.spongepowered.asm.launch.MixinTweaker')
    
    // Add various JVM arguments here for runtime
    def args = ["-ea:${project.group}"]
    if (project.use_coremod.toBoolean()) {
        args << '-Dfml.coreMods.load=' + coremod_plugin_class_name
    }
    if (project.use_mixins.toBoolean()) {
        args << '-Dmixin.hotSwap=true'
        args << '-Dmixin.checks.interfaces=true'
        args << '-Dmixin.debug.export=true'
    }
    extraRunJvmArguments.addAll(args)

    // Include and use dependencies' Access Transformer files
    useDependencyAccessTransformers = true
    
    // Add any properties you want to swap out for a dynamic value at build time here
    // Any properties here will be added to a class at build time, the name can be configured below
    // Example:
    injectedTags.put('VERSION', project.version)
    injectedTags.put('MODNAME', project.mod_name)
}

// Generate a group.archives_base_name.Tags class
tasks.injectTags.configure {
    // Change Tags class' name here:
    outputClassName.set("${project.group}.${project.archives_base_name}.Tags")
}

repositories {
    maven { url "https://repo.spongepowered.org/maven" }
    maven { url "https://repo.cleanroommc.com/releases" }
    maven { url "https://dvs1.progwml6.com/files/maven" }
    maven { url "https://maven.blamejared.com/" }
    maven { url "https://www.ryanliptak.com/maven/" }
    maven { url "https://maven.thiakil.com/" }
    maven { url "https://maven.shadowfacts.net/" }
    maven {
        name 'GTNH Maven'
        url 'https://nexus.gtnewhorizons.com/repository/public/'
    }
    maven {
        name 'GTCEu Maven'
        url 'https://maven.gtceu.com'
    }
    maven {
        name 'CurseMaven'
        url 'https://cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    mavenLocal() // Must be last for caching to work
}

dependencies {
    // Common:
    annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
    annotationProcessor 'com.google.guava:guava:32.1.2-jre'
    annotationProcessor 'com.google.code.gson:gson:2.8.9'

    // RetroFuturaGradle:
    String mixinBooter = modUtils.enableMixins('zone.rong:mixinbooter:9.1')
    // modUtils.enableMixins('zone.rong:mixinbooter:9.1', 'mod_id.mixins.refmap.json') << add refmap name as 2nd arg (optional)
    api(mixinBooter) {
        transitive = false
    }
    annotationProcessor(mixinBooter) {
        transitive = false
    }

     // Dependencies
    implementation "CraftTweaker2:CraftTweaker2-API:" + project.version_crafttweaker
    implementation "CraftTweaker2:ZenScript:" + project.version_crafttweaker
    implementation "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-" + project.version_crafttweaker

    implementation rfg.deobf("curse.maven:had-enough-items-557549:5229422")
    implementation("com.cleanroommc:groovyscript:1.0.1") { transitive = false } // so it doesn't installs JEI

    implementation "net.shadowfacts:Forgelin:${forgelin_version}"

    implementation rfg.deobf("curse.maven:alchemylib-293426:2761706")
    implementation rfg.deobf("curse.maven:game-stages-268655:2951840")
    implementation rfg.deobf("curse.maven:bookshelf-228525:2836960")

    // Runtime dependencies
    runtimeOnly rfg.deobf("curse.maven:the-one-probe-community-edition-885670:5171095")
    runtimeOnly rfg.deobf("curse.maven:vintagefix-871198:5010926")
    runtimeOnly rfg.deobf("curse.maven:startup-timer-782070:5001902")

    runtimeOnly "com.cleanroommc:configanytime:2.0"
    runtimeOnly rfg.deobf("curse.maven:red-core-873867:4883852")
    runtimeOnly rfg.deobf("curse.maven:alfheim-lighting-engine-910715:4949716")
    runtimeOnly rfg.deobf("curse.maven:valkyrie-874067:4591076")
}


// Adds Access Transformer files to tasks
if (project.use_access_transformer.toBoolean()) {
    for (File at : sourceSets.getByName("main").resources.files) {
        if (at.name.toLowerCase().endsWith("_at.cfg")) {
            tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
            tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)
        }
    }
}

processResources {
    // This will ensure that this task is redone when the versions change
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version
    inputs.property 'mod_name', project.mod_name
    
    // Replace various properties in mcmod.info and pack.mcmeta if applicable
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        // Replace version and mcversion
        fcd.expand (
                'version': project.version,
                'mcversion': project.minecraft.version,
                'modname': project.mod_name
        )
    }
    
    if (project.use_access_transformer.toBoolean()) {
        rename '(.+_at.cfg)', 'META-INF/$1' // Make sure Access Transformer files are in META-INF folder
    }
}

jar {
    manifest {
        def attribute_map = [:]
        if (project.use_coremod.toBoolean()) {
            attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
            if (project.include_mod.toBoolean()) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
                attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == "build"
            }
        }
        if (project.use_access_transformer.toBoolean()) {
            attribute_map['FMLAT'] = project.archives_base_name + '_at.cfg'
        }
        attributes(attribute_map)
    }
    // Add all embedded dependencies into the jar
    from(provider{ configurations.embed.collect {it.isDirectory() ? it : zipTree(it)} })
}

idea {
    module {
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                "Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
                "Run Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient"]
                }
                "Run Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [
                            (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
                    ]
                }
            }
        }
    }
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}

tasks.named("injectTags").configure {
    dependsOn("compileInjectedTagsKotlin")
}
tasks.named("decompressDecompiledSources").configure {
    dependsOn("compilePatchedMcKotlin")
}
tasks.named("createMcLauncherFiles").configure {
    dependsOn("compileMcLauncherKotlin")
}
